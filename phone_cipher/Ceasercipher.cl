#! /usr/bin/gcl -f

(defun letterToNum (x)
	(cond
		((equalp x 'a) 0)
		((equalp x 'b) 1)
		((equalp x 'c) 2)
		((equalp x 'd) 3)
		((equalp x 'e) 4)
		((equalp x 'f) 5)
		((equalp x 'g) 6)
		((equalp x 'h) 7)
		((equalp x 'i) 8)
		((equalp x 'j) 9)
		((equalp x 'k) 10)
		((equalp x 'l) 11)
		((equalp x 'm) 12)
		((equalp x 'n) 13)
		((equalp x 'o) 14)
		((equalp x 'p) 15)
		((equalp x 'q) 16)
		((equalp x 'r) 17)
		((equalp x 's) 18)
		((equalp x 't) 19)
		((equalp x 'u) 20)
		((equalp x 'v) 21)
		((equalp x 'w) 22)
		((equalp x 'x) 23)
		((equalp x 'y) 24)
		((equalp x 'z) 25)
		(t nil)

	)
)

(defun NumtoLet (x)
	(cond
		((equalp x '0) 'a)
		((equalp x '1) 'b)
		((equalp x '2) 'c)
		((equalp x '3) 'd)
		((equalp x '4) 'e)
		((equalp x '5) 'f)
		((equalp x '6) 'g)
		((equalp x '7) 'h)
		((equalp x '8) 'i)
		((equalp x '9) 'j)
		((equalp x '10) 'k)
		((equalp x '11) 'l)
		((equalp x '12) 'm)
		((equalp x '13) 'n)
		((equalp x '14) 'o)
		((equalp x '15) 'p)
		((equalp x '16) 'q)
		((equalp x '17) 'r)
		((equalp x '18) 's)
		((equalp x '19) 't)
		((equalp x '20) 'u)
		((equalp x '21) 'v)
		((equalp x '22) 'w)
		((equalp x '23) 'x)
		((equalp x '24) 'y)
		((equalp x '25) 'z)
	)
)


(defun decode ()
	(defvar input nil)
	(defvar number nil)
	(defvar plus nil)
	(defvar mod nil)
	(defvar result nil)

	(format t "plase enter some text to encode~%")
	(setf input (read))
	(setf number (mapcar 'letterToNum input))
	;mapcar (lambda (arg) (/ arg 50)) full-range))
	(setf plus (mapcar (lambda (arg) (+ 7 arg)) number ))
	(setf mod (mapcar (lambda (arg) (mod arg 26)) plus ))
	(format t "~A~%" (mapcar 'NumtoLet mod))
	(if (null input)
		nil
		(decode)
	)
)

(decode)
